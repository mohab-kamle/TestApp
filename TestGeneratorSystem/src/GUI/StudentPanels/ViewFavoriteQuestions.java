package GUI.StudentPanels;

import DataBaseManagment.CategoryDAO;
import DataBaseManagment.QuestionBankDAO;
import DataBaseManagment.StudentDAO;
import EndUser.Student;
import TestSystem.Category;
import TestSystem.Question;
import TestSystem.QuestionBank;
import java.awt.CardLayout;
import java.awt.Color;
import java.net.URL;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.JPanel;

/**
 *
 * @author Zeyad
 */
public class ViewFavoriteQuestions extends javax.swing.JPanel {

    Student student;
    private CardLayout cardLayout;
    private JPanel container;
    StringBuilder selected;
    int Index = 0;
    List<Question> allFavorites;
    List<Question> categoryFavorites;
    Question currentQuestion;
    List<Category> categoriesList;

    /**
     * Creates new form ViewFavoriteQuestions
     */
    public ViewFavoriteQuestions(Student student, CardLayout cardLayout, JPanel container) {
        this.categoryFavorites = new ArrayList<>();
        initComponents();
        this.student = student;
        this.cardLayout = cardLayout;
        this.container = container;
        imageHolder.setVisible(false);
//        CatogoryDropList.removeAllItems();
        selected = new StringBuilder("Select Category");
        if (student.getFavoriteQuestions() == null || student.getFavoriteQuestions().isEmpty()) {
            QuesitionHolder.setVisible(false);
            QuesitionID.setVisible(false);
            AHOLDER.setVisible(false);
            BHOLDER.setVisible(false);
            CHOLDER.setVisible(false);
            DHOLDER.setVisible(false);
            FAVButton.setVisible(false);
            FAVNUMHOLDER.setVisible(false);
            NextButton.setVisible(false);
            PrevButton.setVisible(false);
            Tnum.setVisible(false);
            CatogoryDropList.setVisible(false);
            URL iconURL = getClass().getResource("/lib/refav.png");
            if (iconURL != null) {
                imageHolder.setIcon(new javax.swing.ImageIcon(iconURL));
                imageHolder.setText("");
                imageHolder.setVisible(true);
            } else {
                // Handle the error, e.g., log it or show a default icon 
                System.err.println("Resource not found: /lib/emptyfav.png");
            }
        }
        setupallfavQ();

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        CatogoryDropList = new javax.swing.JComboBox<>();
        QuesitionHolder = new javax.swing.JLabel();
        FavQTitle = new javax.swing.JLabel();
        FAVButton = new javax.swing.JButton();
        QuesitionID = new javax.swing.JLabel();
        AHOLDER = new javax.swing.JLabel();
        BHOLDER = new javax.swing.JLabel();
        CHOLDER = new javax.swing.JLabel();
        DHOLDER = new javax.swing.JLabel();
        FAVNUMHOLDER = new javax.swing.JLabel();
        PrevButton = new javax.swing.JButton();
        NextButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        Tnum = new javax.swing.JLabel();
        imageHolder = new javax.swing.JLabel();

        setBackground(new java.awt.Color(244, 242, 226));
        setLayout(new java.awt.GridBagLayout());

        CatogoryDropList.setBackground(new java.awt.Color(244, 242, 226));
        CatogoryDropList.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        CatogoryDropList.setForeground(new java.awt.Color(0, 0, 0));
        CatogoryDropList.setBorder(new javax.swing.border.MatteBorder(null));
        CatogoryDropList.setPreferredSize(new java.awt.Dimension(350, 36));
        CatogoryDropList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CatogoryDropListActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(CatogoryDropList, gridBagConstraints);

        QuesitionHolder.setBackground(new java.awt.Color(255, 255, 255));
        QuesitionHolder.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        QuesitionHolder.setForeground(new java.awt.Color(0, 0, 0));
        QuesitionHolder.setText("\"Quesition HOLDER\"");
        QuesitionHolder.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 556;
        gridBagConstraints.ipady = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(QuesitionHolder, gridBagConstraints);

        FavQTitle.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        FavQTitle.setForeground(new java.awt.Color(0, 0, 0));
        FavQTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        FavQTitle.setText("Favorite Question");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(FavQTitle, gridBagConstraints);

        FAVButton.setBackground(new java.awt.Color(244, 242, 226));
        FAVButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lib/FAVButtonWINDOS10EDITION.png"))); // NOI18N
        FAVButton.setBorderPainted(false);
        FAVButton.setFocusPainted(false);
        FAVButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FAVButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(FAVButton, gridBagConstraints);

        QuesitionID.setBackground(new java.awt.Color(255, 255, 255));
        QuesitionID.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        QuesitionID.setForeground(new java.awt.Color(0, 0, 0));
        QuesitionID.setText("\"QuesitionID:IDHOLDER\"");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 371;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(QuesitionID, gridBagConstraints);

        AHOLDER.setBackground(new java.awt.Color(255, 255, 255));
        AHOLDER.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        AHOLDER.setForeground(new java.awt.Color(0, 0, 0));
        AHOLDER.setText("\"AHOLDER\"");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 136;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(AHOLDER, gridBagConstraints);

        BHOLDER.setBackground(new java.awt.Color(255, 255, 255));
        BHOLDER.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        BHOLDER.setForeground(new java.awt.Color(0, 0, 0));
        BHOLDER.setText("\"BHOLDER\"");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 136;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(BHOLDER, gridBagConstraints);

        CHOLDER.setBackground(new java.awt.Color(255, 255, 255));
        CHOLDER.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        CHOLDER.setForeground(new java.awt.Color(0, 0, 0));
        CHOLDER.setText("\"CHOLDER\"");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 136;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(CHOLDER, gridBagConstraints);

        DHOLDER.setBackground(new java.awt.Color(255, 255, 255));
        DHOLDER.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        DHOLDER.setForeground(new java.awt.Color(0, 0, 0));
        DHOLDER.setText("\"DHOLDER\"");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 136;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(DHOLDER, gridBagConstraints);

        FAVNUMHOLDER.setBackground(new java.awt.Color(255, 255, 255));
        FAVNUMHOLDER.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        FAVNUMHOLDER.setForeground(new java.awt.Color(0, 0, 0));
        FAVNUMHOLDER.setText("\"FAVNUMHOLDER\"");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(FAVNUMHOLDER, gridBagConstraints);

        PrevButton.setBackground(new java.awt.Color(74, 25, 72));
        PrevButton.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        PrevButton.setForeground(new java.awt.Color(244, 242, 226));
        PrevButton.setText("Previus");
        PrevButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PrevButton.setFocusPainted(false);
        PrevButton.setPreferredSize(new java.awt.Dimension(145, 35));
        PrevButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                PrevButtonMouseMoved(evt);
            }
        });
        PrevButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PrevButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                PrevButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                PrevButtonMousePressed(evt);
            }
        });
        PrevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrevButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.ipadx = 51;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(PrevButton, gridBagConstraints);

        NextButton.setBackground(new java.awt.Color(74, 25, 72));
        NextButton.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        NextButton.setForeground(new java.awt.Color(244, 242, 226));
        NextButton.setText("Next");
        NextButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        NextButton.setFocusPainted(false);
        NextButton.setPreferredSize(new java.awt.Dimension(145, 35));
        NextButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                NextButtonMouseMoved(evt);
            }
        });
        NextButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                NextButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                NextButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                NextButtonMousePressed(evt);
            }
        });
        NextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.ipadx = 51;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(NextButton, gridBagConstraints);

        BackButton.setBackground(new java.awt.Color(74, 25, 72));
        BackButton.setFont(new java.awt.Font("Consolas", 0, 36)); // NOI18N
        BackButton.setToolTipText("Click to go back");
        BackButton.setBorderPainted(false);
        BackButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BackButton.setFocusPainted(false);
        BackButton.setFocusable(false);
        BackButton.setMaximumSize(new java.awt.Dimension(145, 60));
        BackButton.setMinimumSize(new java.awt.Dimension(145, 60));
        BackButton.setPreferredSize(new java.awt.Dimension(145, 60));
        BackButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                BackButtonFocusGained(evt);
            }
        });
        BackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BackButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BackButtonMouseExited(evt);
            }
        });
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(BackButton, gridBagConstraints);

        Tnum.setForeground(new java.awt.Color(0, 0, 0));
        Tnum.setText("\"1\"");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Tnum, gridBagConstraints);

        imageHolder.setForeground(new java.awt.Color(0, 0, 0));
        imageHolder.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageHolder.setText("\"emptyImageHolder\"");
        imageHolder.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(imageHolder, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void CatogoryDropListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CatogoryDropListActionPerformed
        // TODO add your handling code here:
        Index = 0;
        if (selected == null) {
            selected = new StringBuilder();
        } else {

        }
        selected.setLength(0);
        selected.append((String) CatogoryDropList.getSelectedItem());
        if (!(selected.toString().equals("Select Category") || selected.toString().equals("All Category"))) {
            setupcategoryfavq();
            FAVNUMHOLDER.setText("Number of Favorites: " + categoryFavorites.size());
        } else
            DisplayFav();
    }//GEN-LAST:event_CatogoryDropListActionPerformed

    private void PrevButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PrevButtonMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_PrevButtonMouseMoved

    private void PrevButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PrevButtonMouseEntered
        // TODO add your handling code here:
        PrevButton.setBackground(Color.decode("#F4F2E2"));
        PrevButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5, true));
        PrevButton.setBorderPainted(true);
        PrevButton.setForeground(Color.BLACK);
    }//GEN-LAST:event_PrevButtonMouseEntered

    private void PrevButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PrevButtonMouseExited
        // TODO add your handling code here:
        PrevButton.setBackground(Color.decode("#4A1948"));
        PrevButton.setBorderPainted(false);
        PrevButton.setForeground(Color.decode("#F4F2E2"));
    }//GEN-LAST:event_PrevButtonMouseExited

    private void PrevButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PrevButtonMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_PrevButtonMousePressed

    private void PrevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrevButtonActionPerformed
        // TODO add your handling code here:
        Index = (Index - 1 + allFavorites.size()) % allFavorites.size();
        DisplayFav();
    }//GEN-LAST:event_PrevButtonActionPerformed

    private void NextButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NextButtonMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_NextButtonMouseMoved

    private void NextButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NextButtonMouseEntered
        // TODO add your handling code here:
        PrevButton.setBackground(Color.decode("#F4F2E2"));
        PrevButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5, true));
        PrevButton.setBorderPainted(true);
        PrevButton.setForeground(Color.BLACK);
    }//GEN-LAST:event_NextButtonMouseEntered

    private void NextButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NextButtonMouseExited
        // TODO add your handling code here:
        PrevButton.setBackground(Color.decode("#4A1948"));
        PrevButton.setBorderPainted(false);
        PrevButton.setForeground(Color.decode("#F4F2E2"));
    }//GEN-LAST:event_NextButtonMouseExited

    private void NextButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NextButtonMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_NextButtonMousePressed

    private void NextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextButtonActionPerformed
        // TODO add your handling code here:
        Index = (Index + 1) % allFavorites.size();
        DisplayFav();
    }//GEN-LAST:event_NextButtonActionPerformed

    private void BackButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BackButtonFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_BackButtonFocusGained

    private void BackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_BackButtonMouseClicked

    private void BackButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackButtonMouseEntered
        // TODO add your handling code here:
        URL iconURL = getClass().getResource("/lib/turn-back.png");
        if (iconURL != null) {
            BackButton.setIcon(new javax.swing.ImageIcon(iconURL));
        } else {
            // Handle the error, e.g., log it or show a default icon
            System.err.println("Resource not found: /lib/turn-back.png");
        }
        BackButton.setBackground(Color.decode("#F4F2E2"));
        BackButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5, true));
        BackButton.setBorderPainted(true);
    }//GEN-LAST:event_BackButtonMouseEntered

    private void BackButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackButtonMouseExited
        // TODO add your handling code here:
        URL iconURL = getClass().getResource("/lib/turnback-40.png");
        if (iconURL != null) {
            BackButton.setIcon(new javax.swing.ImageIcon(iconURL));
        } else {
            // Handle the error, e.g., log it or show a default icon
            System.err.println("Resource not found: /lib/turnback-40.png");
        }
        BackButton.setBackground(Color.decode("#4A1948"));
        BackButton.setBorderPainted(false);
        BackButton.setForeground(Color.decode("#F4F2E2"));
    }//GEN-LAST:event_BackButtonMouseExited

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        // TODO add your handling code here:
        QuesitionHolder.setVisible(true);
        QuesitionID.setVisible(true);
        AHOLDER.setVisible(true);
        BHOLDER.setVisible(true);
        CHOLDER.setVisible(true);
        DHOLDER.setVisible(true);
        FAVButton.setVisible(true);
        FAVNUMHOLDER.setVisible(true);
        NextButton.setVisible(true);
        PrevButton.setVisible(true);
        Tnum.setVisible(true);
        CatogoryDropList.setVisible(true);
        imageHolder.setVisible(false);
        StudentDashboardMenuP studentDashboard = new StudentDashboardMenuP(student, cardLayout, container);
        container.add(studentDashboard, "studentDashboard");
        cardLayout.show(container, "studentDashboard");
    }//GEN-LAST:event_BackButtonActionPerformed

    private void FAVButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FAVButtonActionPerformed
        // TODO add your handling code here:
        // Check if the question is already a favorite
        boolean isItFavorite = false;
        QuestionBank targetBank = null;

        for (QuestionBank favQuestionBank : student.getFavoriteQuestions()) {
            if (favQuestionBank.getQuestions().contains(currentQuestion)) {
                isItFavorite = true;
                targetBank = favQuestionBank;
                break;
            }
        }

        QuestionBankDAO questionBankDAO = new QuestionBankDAO();
        CategoryDAO categoryDAO = new CategoryDAO();

        if (isItFavorite && targetBank != null) {
            // Unmark as favorite
            //System.out.println("Question removed from favorites: " + question);

            // Update the question's favorite count
            currentQuestion.setNumberOfFavorites(currentQuestion.getNumberOfFavorites() - 1);

            // Update the database
            List<QuestionBank> qb = questionBankDAO.searchByCreator(student.getUserId());

            if (!qb.isEmpty()) {
                ArrayList<Question> currentQs = qb.get(0).getQuestions();
                currentQs.removeIf(q -> q.getQuestionID().equals(currentQuestion.getQuestionID()));
                qb.get(0).setQuestions(currentQs);
                questionBankDAO.updateQuestionBank(qb.get(0));
            }

            // Update the local favoriteQuestions list
            ArrayList<Question> targetQuestions = targetBank.getQuestions();
            targetQuestions.removeIf(q -> q.getQuestionID().equals(currentQuestion.getQuestionID()));
            targetBank.setQuestions(targetQuestions);

            // Update student in database
            StudentDAO studentDAO = new StudentDAO();
            studentDAO.updateStudent(student);

            URL iconURL = getClass().getResource("/lib/DisFAVButtonWINDOS10EDITION.png");
            if (iconURL != null) {
                FAVButton.setIcon(new javax.swing.ImageIcon(iconURL));
            } else {
                // Handle the error, e.g., log it or show a default icon
                System.err.println("Resource not found: /lib/DisFAVButtonWINDOS10EDITION.png");
            }

        } else {
            // Mark as favorite
            Category category = categoryDAO.loadCategory(currentQuestion.getTopic());

            // Try to find matching bank in favoriteQuestions list
            QuestionBank favoriteBank = null;
            for (QuestionBank bank : student.getFavoriteQuestions()) {
                if (bank.getCategoryID().equals(category.getCategoryId())
                        && bank.getCreatorID().equals(student.getUserId())) {
                    favoriteBank = bank;
                    break;
                }
            }

            // If not found in memory, check database
            if (favoriteBank == null) {
                List<QuestionBank> existingBanks = questionBankDAO.searchByCategoryAndCreator(category, student.getUserId());
                for (QuestionBank bank : existingBanks) {
                    if (bank.getCreatorID().equals(student.getUserId())) {
                        favoriteBank = bank;
                        // Add to favoriteQuestions if found in database but not in memory
                        if (!student.getFavoriteQuestions().contains(favoriteBank)) {
                            student.getFavoriteQuestions().add(favoriteBank);
                        }
                        break;
                    }
                }
            }

            // If still null, create new bank
            if (favoriteBank == null) {
                favoriteBank = new QuestionBank(
                        student.getUserId(),
                        category.getCategoryId(),
                        LocalDate.now()
                );
                favoriteBank.setQuestions(new ArrayList<>());
                student.getFavoriteQuestions().add(favoriteBank);
            }

            // Add the question to the favorite bank if it's not already there
            ArrayList<Question> questions = favoriteBank.getQuestions();
            if (!questions.contains(currentQuestion)) {
                questions.add(currentQuestion);
                favoriteBank.setQuestions(questions);

                // Update the question's favorite count
                currentQuestion.setNumberOfFavorites(currentQuestion.getNumberOfFavorites() + 1);

                // Update the database
                //student.updateQuestionInDatabase(currentQuestion, questionBankDAO, categoryDAO);
                questionBankDAO.saveQuestionBank(favoriteBank);

                // Update student in database
                StudentDAO studentDAO = new StudentDAO();
                studentDAO.updateStudent(student);

                URL iconURL = getClass().getResource("/lib/FAVButtonWINDOS10EDITION.png");
                if (iconURL != null) {
                    FAVButton.setIcon(new javax.swing.ImageIcon(iconURL));
                } else {
                    // Handle the error, e.g., log it or show a default icon
                    System.err.println("Resource not found: /lib/FAVButtonWINDOS10EDITION.png");
                }
            }
        }


    }//GEN-LAST:event_FAVButtonActionPerformed
    private void DisplayFav() {
        if (selected.toString().equals("Select Category") || selected.toString().equals("All Category")) {
            currentQuestion = allFavorites.get(Index);
            String[] choices = currentQuestion.getChoices();
            QuesitionID.setText("QuestionID: " + currentQuestion.getQuestionID());
            QuesitionHolder.setText(currentQuestion.getStatement());
            AHOLDER.setText("A- " + choices[0]);
            BHOLDER.setText("B- " + choices[1]);
            CHOLDER.setText("C- " + choices[2]);
            DHOLDER.setText("D- " + choices[3]);
            Tnum.setText((Index + 1) + "OF" + allFavorites.size());
            //FAVNUMHOLDER.setText("Number of Favorites: " + currentQuestion.getNumberOfFavorites());
        } else if (!(categoryFavorites.isEmpty() || categoryFavorites == null)) {
            currentQuestion = categoryFavorites.get(Index);
            String[] choices = currentQuestion.getChoices();
            QuesitionID.setText("QuestionID: " + currentQuestion.getQuestionID());
            QuesitionHolder.setText(currentQuestion.getStatement());
            AHOLDER.setText("A- " + choices[0]);
            BHOLDER.setText("B- " + choices[1]);
            CHOLDER.setText("C- " + choices[2]);
            DHOLDER.setText("D- " + choices[3]);
            Tnum.setText((Index + 1) + "OF" + categoryFavorites.size());
            //FAVNUMHOLDER.setText("Number of Favorites: " + currentQuestion.getNumberOfFavorites());
        }
    }

    private void setupallfavQ() {
        allFavorites = new ArrayList<>();
        for (QuestionBank favoriteBank : student.getFavoriteQuestions()) {
            allFavorites.addAll(favoriteBank.getQuestions());
        }
        Set<Category> favoriteCategories = student.getFavoriteQuestions().stream()
                .map(q -> {
                    CategoryDAO categoryDAO = new CategoryDAO();
                    return categoryDAO.loadCategory(q.getCategoryID());
                })
                .collect(Collectors.toSet());
        categoriesList = new ArrayList<>(favoriteCategories);
        CatogoryDropList.addItem("Select Category");
        CatogoryDropList.addItem("All Category");
        for (int i = 0; i < categoriesList.size(); i++) {
            CatogoryDropList.addItem(categoriesList.get(i).getName());
        }
        //CatogoryDropList.setSelectedItem("Select Category");
        if (allFavorites.isEmpty() || allFavorites == null) {
            QuesitionHolder.setVisible(false);
            QuesitionID.setVisible(false);
            AHOLDER.setVisible(false);
            BHOLDER.setVisible(false);
            CHOLDER.setVisible(false);
            DHOLDER.setVisible(false);
            FAVButton.setVisible(false);
            FAVNUMHOLDER.setVisible(false);
            NextButton.setVisible(false);
            PrevButton.setVisible(false);
            Tnum.setVisible(false);
            CatogoryDropList.setVisible(false);
            URL iconURL = getClass().getResource("/lib/refav.png");
            if (iconURL != null) {
                imageHolder.setIcon(new javax.swing.ImageIcon(iconURL));
                imageHolder.setText("");
                imageHolder.setVisible(true);
            }
        }
        FAVNUMHOLDER.setText("Number of Favorites: " + allFavorites.size());
        DisplayFav();

    }

    private void setupcategoryfavq() {

        Category selectedCategory = null;
        for (Category category : categoriesList) {
            if (category.getName().equalsIgnoreCase(selected.toString())) { // Compare names (case-insensitive)
                selectedCategory = category;
                break;
            }
        }
        Category selectederror = selectedCategory;
        // Filter questions by selected category            
        if (selectederror != null) {
            for (QuestionBank favoriteQuestionBank : student.getFavoriteQuestions()) {
                categoryFavorites = favoriteQuestionBank.getQuestions().stream()
                        .filter(q -> {
                            CategoryDAO categoryDAO = new CategoryDAO();
                            Category qCategory = categoryDAO.loadCategory(q.getTopic());
                            return qCategory.equals(selectederror);
                        })
                        .collect(Collectors.toList());
            }
        }

        if (allFavorites.isEmpty() || allFavorites == null || categoryFavorites.isEmpty() || categoryFavorites == null) {
            QuesitionHolder.setVisible(false);
            QuesitionID.setVisible(false);
            AHOLDER.setVisible(false);
            BHOLDER.setVisible(false);
            CHOLDER.setVisible(false);
            DHOLDER.setVisible(false);
            FAVButton.setVisible(false);
            FAVNUMHOLDER.setVisible(false);
            NextButton.setVisible(false);
            PrevButton.setVisible(false);
            Tnum.setVisible(false);
            CatogoryDropList.setVisible(false);
            URL iconURL = getClass().getResource("/lib/refav.png");
            if (iconURL != null) {
                imageHolder.setIcon(new javax.swing.ImageIcon(iconURL));
                imageHolder.setText("");
                imageHolder.setVisible(true);
            }
        }
        DisplayFav();

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AHOLDER;
    private javax.swing.JLabel BHOLDER;
    private javax.swing.JButton BackButton;
    private javax.swing.JLabel CHOLDER;
    private javax.swing.JComboBox<String> CatogoryDropList;
    private javax.swing.JLabel DHOLDER;
    private javax.swing.JButton FAVButton;
    private javax.swing.JLabel FAVNUMHOLDER;
    private javax.swing.JLabel FavQTitle;
    private javax.swing.JButton NextButton;
    private javax.swing.JButton PrevButton;
    private javax.swing.JLabel QuesitionHolder;
    private javax.swing.JLabel QuesitionID;
    private javax.swing.JLabel Tnum;
    private javax.swing.JLabel imageHolder;
    // End of variables declaration//GEN-END:variables
}
