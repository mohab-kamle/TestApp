/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.StudentPanels;

import EndUser.Student;
import static TestSystem.Question.dlevel.EASY;
import static TestSystem.Question.dlevel.HARD;
import static TestSystem.Question.dlevel.MEDIUM;
import TestSystem.Test;
import java.awt.CardLayout;
import java.awt.Color;
import java.net.URL;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JPanel;

/**
 *
 * @author Zeyad
 */
public class ViewTestHistoryPanelP extends javax.swing.JPanel {

    private Student student;
    private CardLayout cardLayout;
    private JPanel container;
    QuesitionsFullDetailsPanelP QuesFDP;
    protected int Index = 0;
    List<Test> sortedTests;
    Test currentTest;

    /**
     * Creates new form ViewTestHistoryPanelP
     */
    public ViewTestHistoryPanelP(Student student, CardLayout cardLayout, JPanel container) {
        initComponents();
        this.student = student;
        this.cardLayout = cardLayout;
        this.container = container;
        EmptyHistory.setVisible(false);
        sortedTests = new ArrayList<>(student.getTakenTests());
        sortedTests.sort((t1, t2) -> t2.getCreationDate().compareTo(t1.getCreationDate()));
        if (student.getTakenTests() == null || student.getTakenTests().isEmpty()) {
            Tnum.setVisible(false);
            TimeTaken.setVisible(false);
            TimeTakenHolder.setVisible(false);
            TestId.setVisible(false);
            TestIDHolder.setVisible(false);
            Status.setVisible(false);
            StatusHolder.setVisible(false);
            StartTime.setVisible(false);
            StartDHolder.setVisible(false);
            ScoreHolder.setVisible(false);
            PercentageHolder.setVisible(false);
            Score.setVisible(false);
            PrevButton.setVisible(false);
            Percentage.setVisible(false);
            NextButton.setVisible(false);
            FullDetails.setVisible(false);
            EndTime.setVisible(false);
            EndDHolder.setVisible(false);
            Difficulty.setVisible(false);
            DifficultyHolder.setVisible(false);
            DateHolder.setVisible(false);
            CategoryHolder.setVisible(false);
            Category.setVisible(false);
            Date.setVisible(false);
            URL iconURL = getClass().getResource("/lib/resizedtesthistoryempty.png");
            if (iconURL != null) {
                EmptyHistory.setIcon(new javax.swing.ImageIcon(iconURL));
                EmptyHistory.setText("");
                EmptyHistory.setVisible(true);
            } else {
                // Handle the error, e.g., log it or show a default icon 
                System.err.println("Resource not found: /lib/emptyfav.png");
            }
        }
        UpdateIndex();
        QuesFDP = new QuesitionsFullDetailsPanelP(currentTest, cardLayout, container);
        container.add(QuesFDP, "QuesFDP");
        container.add(QuesFDP, "QuesFDP");
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        TestDetailsTitle = new javax.swing.JLabel();
        EmptyHistory = new javax.swing.JLabel();
        TestId = new javax.swing.JLabel();
        Date = new javax.swing.JLabel();
        TimeTaken = new javax.swing.JLabel();
        StartTime = new javax.swing.JLabel();
        Percentage = new javax.swing.JLabel();
        EndTime = new javax.swing.JLabel();
        Difficulty = new javax.swing.JLabel();
        Status = new javax.swing.JLabel();
        Score = new javax.swing.JLabel();
        Category = new javax.swing.JLabel();
        TestIDHolder = new javax.swing.JLabel();
        StatusHolder = new javax.swing.JLabel();
        EndDHolder = new javax.swing.JLabel();
        DateHolder = new javax.swing.JLabel();
        DifficultyHolder = new javax.swing.JLabel();
        CategoryHolder = new javax.swing.JLabel();
        StartDHolder = new javax.swing.JLabel();
        TimeTakenHolder = new javax.swing.JLabel();
        ScoreHolder = new javax.swing.JLabel();
        PercentageHolder = new javax.swing.JLabel();
        PrevButton = new javax.swing.JButton();
        NextButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        Tnum = new javax.swing.JLabel();
        FullDetails = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 35), new java.awt.Dimension(0, 35), new java.awt.Dimension(32767, 35));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(150, 100), new java.awt.Dimension(150, 100), new java.awt.Dimension(150, 100));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(150, 100), new java.awt.Dimension(150, 100), new java.awt.Dimension(150, 100));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 50), new java.awt.Dimension(0, 50), new java.awt.Dimension(32767, 50));

        setBackground(new java.awt.Color(244, 242, 226));
        setLayout(new java.awt.GridBagLayout());

        TestDetailsTitle.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        TestDetailsTitle.setForeground(new java.awt.Color(0, 0, 0));
        TestDetailsTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TestDetailsTitle.setText("Test Details");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.ipadx = 335;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(TestDetailsTitle, gridBagConstraints);

        EmptyHistory.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        EmptyHistory.setForeground(new java.awt.Color(255, 0, 0));
        EmptyHistory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        EmptyHistory.setText("No Tests available");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.ipadx = 388;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(EmptyHistory, gridBagConstraints);

        TestId.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        TestId.setForeground(new java.awt.Color(0, 0, 0));
        TestId.setText("Test ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 56;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(TestId, gridBagConstraints);

        Date.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        Date.setForeground(new java.awt.Color(0, 0, 0));
        Date.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 97;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Date, gridBagConstraints);

        TimeTaken.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        TimeTaken.setForeground(new java.awt.Color(0, 0, 0));
        TimeTaken.setText("Time Taken");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(TimeTaken, gridBagConstraints);

        StartTime.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        StartTime.setForeground(new java.awt.Color(0, 0, 0));
        StartTime.setText("Start Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(StartTime, gridBagConstraints);

        Percentage.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        Percentage.setForeground(new java.awt.Color(0, 0, 0));
        Percentage.setText("Percentage");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Percentage, gridBagConstraints);

        EndTime.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        EndTime.setForeground(new java.awt.Color(0, 0, 0));
        EndTime.setText("End Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 42;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(EndTime, gridBagConstraints);

        Difficulty.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        Difficulty.setForeground(new java.awt.Color(0, 0, 0));
        Difficulty.setText("Difficulty");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Difficulty, gridBagConstraints);

        Status.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        Status.setForeground(new java.awt.Color(0, 0, 0));
        Status.setText("Status");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.ipadx = 69;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Status, gridBagConstraints);

        Score.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        Score.setForeground(new java.awt.Color(0, 0, 0));
        Score.setText("Score");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.ipadx = 83;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Score, gridBagConstraints);

        Category.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        Category.setForeground(new java.awt.Color(0, 0, 0));
        Category.setText("Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 42;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Category, gridBagConstraints);

        TestIDHolder.setBackground(new java.awt.Color(255, 255, 255));
        TestIDHolder.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N
        TestIDHolder.setForeground(new java.awt.Color(0, 0, 0));
        TestIDHolder.setText("\"HOLDER\"");
        TestIDHolder.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 422;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(TestIDHolder, gridBagConstraints);

        StatusHolder.setBackground(new java.awt.Color(255, 255, 255));
        StatusHolder.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N
        StatusHolder.setForeground(new java.awt.Color(0, 0, 0));
        StatusHolder.setText("\"HOLDER\"");
        StatusHolder.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.ipadx = 175;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(StatusHolder, gridBagConstraints);

        EndDHolder.setBackground(new java.awt.Color(255, 255, 255));
        EndDHolder.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N
        EndDHolder.setForeground(new java.awt.Color(0, 0, 0));
        EndDHolder.setText("\"HOLDER\"");
        EndDHolder.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 175;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(EndDHolder, gridBagConstraints);

        DateHolder.setBackground(new java.awt.Color(255, 255, 255));
        DateHolder.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N
        DateHolder.setForeground(new java.awt.Color(0, 0, 0));
        DateHolder.setText("\"HOLDER\"");
        DateHolder.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 175;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(DateHolder, gridBagConstraints);

        DifficultyHolder.setBackground(new java.awt.Color(255, 255, 255));
        DifficultyHolder.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N
        DifficultyHolder.setForeground(new java.awt.Color(0, 0, 0));
        DifficultyHolder.setText("\"HOLDER\"");
        DifficultyHolder.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.ipadx = 175;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(DifficultyHolder, gridBagConstraints);

        CategoryHolder.setBackground(new java.awt.Color(255, 255, 255));
        CategoryHolder.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N
        CategoryHolder.setForeground(new java.awt.Color(0, 0, 0));
        CategoryHolder.setText("\"HOLDER\"");
        CategoryHolder.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 175;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(CategoryHolder, gridBagConstraints);

        StartDHolder.setBackground(new java.awt.Color(255, 255, 255));
        StartDHolder.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N
        StartDHolder.setForeground(new java.awt.Color(0, 0, 0));
        StartDHolder.setText("\"HOLDER\"");
        StartDHolder.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 175;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(StartDHolder, gridBagConstraints);

        TimeTakenHolder.setBackground(new java.awt.Color(255, 255, 255));
        TimeTakenHolder.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N
        TimeTakenHolder.setForeground(new java.awt.Color(0, 0, 0));
        TimeTakenHolder.setText("\"HOLDER\"");
        TimeTakenHolder.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 175;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(TimeTakenHolder, gridBagConstraints);

        ScoreHolder.setBackground(new java.awt.Color(255, 255, 255));
        ScoreHolder.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N
        ScoreHolder.setForeground(new java.awt.Color(0, 0, 0));
        ScoreHolder.setText("\"HOLDER\"");
        ScoreHolder.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.ipadx = 175;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(ScoreHolder, gridBagConstraints);

        PercentageHolder.setBackground(new java.awt.Color(255, 255, 255));
        PercentageHolder.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N
        PercentageHolder.setForeground(new java.awt.Color(0, 0, 0));
        PercentageHolder.setText("\"HOLDER\"");
        PercentageHolder.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.ipadx = 175;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(PercentageHolder, gridBagConstraints);

        PrevButton.setBackground(new java.awt.Color(74, 25, 72));
        PrevButton.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        PrevButton.setForeground(new java.awt.Color(244, 242, 226));
        PrevButton.setText("Previus");
        PrevButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PrevButton.setFocusPainted(false);
        PrevButton.setPreferredSize(new java.awt.Dimension(105, 40));
        PrevButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                PrevButtonMouseMoved(evt);
            }
        });
        PrevButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PrevButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                PrevButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                PrevButtonMousePressed(evt);
            }
        });
        PrevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrevButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(PrevButton, gridBagConstraints);

        NextButton.setBackground(new java.awt.Color(74, 25, 72));
        NextButton.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        NextButton.setForeground(new java.awt.Color(244, 242, 226));
        NextButton.setText("Next");
        NextButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        NextButton.setFocusPainted(false);
        NextButton.setPreferredSize(new java.awt.Dimension(105, 40));
        NextButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                NextButtonMouseMoved(evt);
            }
        });
        NextButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                NextButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                NextButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                NextButtonMousePressed(evt);
            }
        });
        NextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(NextButton, gridBagConstraints);

        BackButton.setBackground(new java.awt.Color(74, 25, 72));
        BackButton.setFont(new java.awt.Font("Consolas", 0, 36)); // NOI18N
        BackButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lib/turnback-40.png"))); // NOI18N
        BackButton.setToolTipText("Click to go back");
        BackButton.setBorderPainted(false);
        BackButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BackButton.setFocusPainted(false);
        BackButton.setFocusable(false);
        BackButton.setMaximumSize(new java.awt.Dimension(145, 60));
        BackButton.setMinimumSize(new java.awt.Dimension(145, 60));
        BackButton.setPreferredSize(new java.awt.Dimension(145, 60));
        BackButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                BackButtonFocusGained(evt);
            }
        });
        BackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BackButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BackButtonMouseExited(evt);
            }
        });
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        add(BackButton, gridBagConstraints);

        Tnum.setForeground(new java.awt.Color(0, 0, 0));
        Tnum.setText("\"1\"");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        add(Tnum, gridBagConstraints);

        FullDetails.setBackground(new java.awt.Color(74, 25, 72));
        FullDetails.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N
        FullDetails.setForeground(new java.awt.Color(244, 242, 226));
        FullDetails.setText("Full Details");
        FullDetails.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        FullDetails.setFocusPainted(false);
        FullDetails.setPreferredSize(new java.awt.Dimension(145, 50));
        FullDetails.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                FullDetailsMouseMoved(evt);
            }
        });
        FullDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                FullDetailsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                FullDetailsMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                FullDetailsMousePressed(evt);
            }
        });
        FullDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FullDetailsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.ipady = 5;
        add(FullDetails, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 17;
        add(filler2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 17;
        add(filler3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 13;
        add(filler4, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void PrevButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PrevButtonMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_PrevButtonMouseMoved

    private void PrevButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PrevButtonMouseEntered
        // TODO add your handling code here:
        PrevButton.setBackground(Color.decode("#F4F2E2"));
        PrevButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5, true));
        PrevButton.setBorderPainted(true);
        PrevButton.setForeground(Color.BLACK);
    }//GEN-LAST:event_PrevButtonMouseEntered

    private void PrevButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PrevButtonMouseExited
        // TODO add your handling code here:
        PrevButton.setBackground(Color.decode("#4A1948"));
        PrevButton.setBorderPainted(false);
        PrevButton.setForeground(Color.decode("#F4F2E2"));
    }//GEN-LAST:event_PrevButtonMouseExited

    private void PrevButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PrevButtonMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_PrevButtonMousePressed

    private void PrevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrevButtonActionPerformed
        // TODO add your handling code here:
        Index = (Index - 1 + student.getTakenTests().size()) % student.getTakenTests().size();
        UpdateIndex();
    }//GEN-LAST:event_PrevButtonActionPerformed

    private void BackButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BackButtonFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_BackButtonFocusGained

    private void BackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_BackButtonMouseClicked

    private void BackButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackButtonMouseEntered
        // TODO add your handling code here:
        URL iconURL = getClass().getResource("/lib/turn-back.png");
        if (iconURL != null) {
            BackButton.setIcon(new javax.swing.ImageIcon(iconURL));
        } else {
            // Handle the error, e.g., log it or show a default icon
            System.err.println("Resource not found: /lib/turn-back.png");
        }
        BackButton.setBackground(Color.decode("#F4F2E2"));
        BackButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5, true));
        BackButton.setBorderPainted(true);
    }//GEN-LAST:event_BackButtonMouseEntered

    private void BackButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackButtonMouseExited
        // TODO add your handling code here:
        URL iconURL = getClass().getResource("/lib/turnback-40.png");
        if (iconURL != null) {
            BackButton.setIcon(new javax.swing.ImageIcon(iconURL));
        } else {
            // Handle the error, e.g., log it or show a default icon
            System.err.println("Resource not found: /lib/turnback-40.png");
        }
        BackButton.setBackground(Color.decode("#4A1948"));
        BackButton.setBorderPainted(false);
        BackButton.setForeground(Color.decode("#F4F2E2"));

    }//GEN-LAST:event_BackButtonMouseExited

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        // TODO add your handling code here:
        Tnum.setVisible(false);
            TimeTaken.setVisible(true);
            TimeTakenHolder.setVisible(true);
            TestId.setVisible(false);
            TestIDHolder.setVisible(true);
            Status.setVisible(true);
            StatusHolder.setVisible(true);
            StartTime.setVisible(true);
            StartDHolder.setVisible(true);
            ScoreHolder.setVisible(true);
            PercentageHolder.setVisible(true);
            Score.setVisible(true);
            PrevButton.setVisible(true);
            Percentage.setVisible(true);
            NextButton.setVisible(true);
            FullDetails.setVisible(true);
            EndTime.setVisible(true);
            EndDHolder.setVisible(true);
            Difficulty.setVisible(true);
            DifficultyHolder.setVisible(true);
            DateHolder.setVisible(true);
            CategoryHolder.setVisible(true);
            Category.setVisible(true);
            Date.setVisible(true);
        EmptyHistory.setVisible(false);
        container.remove(QuesFDP);
        container.revalidate();
        container.repaint();
        QuesFDP = null;
        System.gc();
        StudentDashboardMenuP studentDashboard = new StudentDashboardMenuP(student, cardLayout, container);
        container.add(studentDashboard, "studentDashboard");
        cardLayout.show(container, "studentDashboard");
    }//GEN-LAST:event_BackButtonActionPerformed

    private void NextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextButtonActionPerformed
        // TODO add your handling code here:
        Index = (Index + 1) % student.getTakenTests().size();
        UpdateIndex();
    }//GEN-LAST:event_NextButtonActionPerformed

    private void NextButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NextButtonMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_NextButtonMousePressed

    private void NextButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NextButtonMouseExited
        // TODO add your handling code here:
        NextButton.setBackground(Color.decode("#4A1948"));
        NextButton.setBorderPainted(false);
        NextButton.setForeground(Color.decode("#F4F2E2"));
    }//GEN-LAST:event_NextButtonMouseExited

    private void NextButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NextButtonMouseEntered
        // TODO add your handling code here:
        NextButton.setBackground(Color.decode("#F4F2E2"));
        NextButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5, true));
        NextButton.setBorderPainted(true);
        NextButton.setForeground(Color.BLACK);
    }//GEN-LAST:event_NextButtonMouseEntered

    private void NextButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NextButtonMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_NextButtonMouseMoved

    private void FullDetailsMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FullDetailsMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_FullDetailsMouseMoved

    private void FullDetailsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FullDetailsMouseEntered
        // TODO add your handling code here:
        FullDetails.setBackground(Color.decode("#F4F2E2"));
        FullDetails.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5, true));
        FullDetails.setBorderPainted(true);
        FullDetails.setForeground(Color.BLACK);
    }//GEN-LAST:event_FullDetailsMouseEntered

    private void FullDetailsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FullDetailsMouseExited
        // TODO add your handling code here:
        FullDetails.setBackground(Color.decode("#4A1948"));
        FullDetails.setBorderPainted(false);
        FullDetails.setForeground(Color.decode("#F4F2E2"));
    }//GEN-LAST:event_FullDetailsMouseExited

    private void FullDetailsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FullDetailsMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_FullDetailsMousePressed

    private void FullDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FullDetailsActionPerformed
        // TODO add your handling code here:
        QuesFDP = new QuesitionsFullDetailsPanelP(currentTest, cardLayout, container);
        container.add(QuesFDP, "QuesFDP");
        cardLayout.show(container, "QuesFDP");

    }//GEN-LAST:event_FullDetailsActionPerformed
    private void UpdateIndex() {
        if (!(sortedTests.isEmpty() || sortedTests == null)) {
            currentTest = sortedTests.get(Index);
            TestIDHolder.setText(String.valueOf(currentTest.getTestID()));
            StartDHolder.setText(currentTest.getStartTime().format(DateTimeFormatter.ISO_TIME));
            DateHolder.setText(String.valueOf(currentTest.getCreationDate()));
            EndDHolder.setText(currentTest.getEndTime().format(DateTimeFormatter.ISO_TIME));
            TimeTakenHolder.setText(String.format("%.2f", currentTest.timeTaken()) + " minutes");
            CategoryHolder.setText(currentTest.getCategory().getName());
            if (null != currentTest.getDifficulty()) {
                switch (currentTest.getDifficulty()) {
                    case EASY ->
                        DifficultyHolder.setText("Easy");
                    case MEDIUM ->
                        DifficultyHolder.setText("Medium");
                    case HARD ->
                        DifficultyHolder.setText("Hard");
                    default -> {
                    }
                }
            }
            ScoreHolder.setText(((currentTest.getTestResult() / 100) * currentTest.getQuestions().size()) + "/" + currentTest.getQuestions().size());
            PercentageHolder.setText(String.format("%.2f", currentTest.getTestResult()) + "%");
            StatusHolder.setText((currentTest.getTestResult() >= Test.getPassingScore() ? "PASSED" : "FAILED"));
            Tnum.setText((Index + 1) + " OF " + student.getTakenTests().size());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JLabel Category;
    private javax.swing.JLabel CategoryHolder;
    private javax.swing.JLabel Date;
    private javax.swing.JLabel DateHolder;
    private javax.swing.JLabel Difficulty;
    private javax.swing.JLabel DifficultyHolder;
    private javax.swing.JLabel EmptyHistory;
    private javax.swing.JLabel EndDHolder;
    private javax.swing.JLabel EndTime;
    private javax.swing.JButton FullDetails;
    private javax.swing.JButton NextButton;
    private javax.swing.JLabel Percentage;
    private javax.swing.JLabel PercentageHolder;
    private javax.swing.JButton PrevButton;
    private javax.swing.JLabel Score;
    private javax.swing.JLabel ScoreHolder;
    private javax.swing.JLabel StartDHolder;
    private javax.swing.JLabel StartTime;
    private javax.swing.JLabel Status;
    private javax.swing.JLabel StatusHolder;
    private javax.swing.JLabel TestDetailsTitle;
    private javax.swing.JLabel TestIDHolder;
    private javax.swing.JLabel TestId;
    private javax.swing.JLabel TimeTaken;
    private javax.swing.JLabel TimeTakenHolder;
    private javax.swing.JLabel Tnum;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    // End of variables declaration//GEN-END:variables
}
