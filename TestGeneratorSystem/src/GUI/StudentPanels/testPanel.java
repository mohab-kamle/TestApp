/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.StudentPanels;

import DataBaseManagment.CategoryDAO;
import DataBaseManagment.QuestionBankDAO;
import DataBaseManagment.StudentDAO;
import DataBaseManagment.TestDAO;
import EndUser.Student;
import TestSystem.Category;
import TestSystem.Question;
import TestSystem.Question.dlevel;
import TestSystem.QuestionBank;
import TestSystem.Test;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.net.URL;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author Zeyad
 */
public class testPanel extends javax.swing.JPanel {

    private int numQuestions;
    private CardLayout cardLayout;
    private JPanel container;
    private Category choosencategory;
    private dlevel difficulty;
    private Student student;
    private List<Question> availableQuestions;
    private int elapsedSeconds;
    private List<Question> testQuestions;
    private Test test;
    private List<Integer> correctAnswers;
    private List<Double> questionTimes;
    private int Index = 0;
    private double totalTestTime;
    private double averageTimePerQuestion;
    private double percentageScore;
    private int score;
    private TestDAO TDB;
    private double AccumalativePercent = 0;
    private StudentDAO SDB;
    private double[] Time;
    private LocalDateTime startQ;
    private LocalDateTime endQ;
    private Question currentQuestion;
    private char[] answer;

    /**
     * Creates new form testPanel
     */
    public testPanel(Student student, List<Question> availableQuestions, Category choosencategory, dlevel difficulty, int numQuestions, CardLayout cardLayout, JPanel container) {
        initComponents();
        emptyQ.setVisible(false);
        this.numQuestions = numQuestions;
        this.cardLayout = cardLayout;
        this.container = container;
        this.choosencategory = choosencategory;
        this.difficulty = difficulty;
        this.student = student;
        this.availableQuestions = availableQuestions;
        Time = new double[numQuestions];
        Arrays.fill(Time, 0);
        buttonGroup1.add(Achoosen);
        buttonGroup1.add(Bchoosen);
        buttonGroup1.add(Cchoosen);
        buttonGroup1.add(Dchoosen);
        elapsedSeconds = 0;
        Timer timer = new Timer(1000, e -> {
            elapsedSeconds++;
            int hours = elapsedSeconds / 3600;
            int minutes = (elapsedSeconds % 3600) / 60;
            int seconds = elapsedSeconds % 60;

            // Update the label
            String formattedTime = String.format("Time: %02d:%02d:%02d", hours, minutes, seconds);
            Timer.setText(formattedTime);
        });
        timer.start();
        buildtest();
        answer = new char[testQuestions.size()];
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        Achoosen = new javax.swing.JRadioButton();
        Bchoosen = new javax.swing.JRadioButton();
        Dchoosen = new javax.swing.JRadioButton();
        Cchoosen = new javax.swing.JRadioButton();
        questionHolder = new javax.swing.JLabel();
        nextButton = new javax.swing.JButton();
        endButton = new javax.swing.JButton();
        prevButton = new javax.swing.JButton();
        Timer = new javax.swing.JLabel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(250, 0), new java.awt.Dimension(250, 0), new java.awt.Dimension(250, 32767));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 50), new java.awt.Dimension(0, 50), new java.awt.Dimension(32767, 50));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(70, 0), new java.awt.Dimension(70, 0), new java.awt.Dimension(70, 32767));
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 50), new java.awt.Dimension(0, 50), new java.awt.Dimension(32767, 50));
        emptyQ = new javax.swing.JLabel();
        FAVButton = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setBackground(new java.awt.Color(255, 250, 206));
        setLayout(new java.awt.GridBagLayout());

        Achoosen.setBackground(new java.awt.Color(255, 250, 206));
        Achoosen.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        Achoosen.setForeground(new java.awt.Color(0, 0, 0));
        Achoosen.setText("jRadioButton1");
        Achoosen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AchoosenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Achoosen, gridBagConstraints);

        Bchoosen.setBackground(new java.awt.Color(255, 250, 206));
        Bchoosen.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        Bchoosen.setForeground(new java.awt.Color(0, 0, 0));
        Bchoosen.setText("jRadioButton2");
        Bchoosen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BchoosenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Bchoosen, gridBagConstraints);

        Dchoosen.setBackground(new java.awt.Color(255, 250, 206));
        Dchoosen.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        Dchoosen.setForeground(new java.awt.Color(0, 0, 0));
        Dchoosen.setText("jRadioButton3");
        Dchoosen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DchoosenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Dchoosen, gridBagConstraints);

        Cchoosen.setBackground(new java.awt.Color(255, 250, 206));
        Cchoosen.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        Cchoosen.setForeground(new java.awt.Color(0, 0, 0));
        Cchoosen.setText("jRadioButton4");
        Cchoosen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CchoosenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Cchoosen, gridBagConstraints);

        questionHolder.setFont(new java.awt.Font("Consolas", 0, 28)); // NOI18N
        questionHolder.setForeground(new java.awt.Color(0, 0, 0));
        questionHolder.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        questionHolder.setText("QuesHolderaaaaaaaaaaaaaa");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipady = 40;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(questionHolder, gridBagConstraints);

        nextButton.setBackground(new java.awt.Color(74, 25, 72));
        nextButton.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N
        nextButton.setText("Next");
        nextButton.setBorderPainted(false);
        nextButton.setFocusPainted(false);
        nextButton.setPreferredSize(new java.awt.Dimension(200, 36));
        nextButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                nextButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                nextButtonMouseExited(evt);
            }
        });
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(nextButton, gridBagConstraints);

        endButton.setBackground(new java.awt.Color(74, 25, 72));
        endButton.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        endButton.setText("End the test");
        endButton.setBorderPainted(false);
        endButton.setFocusPainted(false);
        endButton.setPreferredSize(new java.awt.Dimension(186, 42));
        endButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                endButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                endButtonMouseExited(evt);
            }
        });
        endButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(endButton, gridBagConstraints);

        prevButton.setBackground(new java.awt.Color(74, 25, 72));
        prevButton.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N
        prevButton.setText("Previus");
        prevButton.setBorderPainted(false);
        prevButton.setFocusPainted(false);
        prevButton.setPreferredSize(new java.awt.Dimension(200, 36));
        prevButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                prevButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                prevButtonMouseExited(evt);
            }
        });
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(prevButton, gridBagConstraints);

        Timer.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        Timer.setForeground(new java.awt.Color(0, 0, 0));
        Timer.setText("Time: 00:00:00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Timer, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        add(filler3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        add(filler4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        add(filler5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        add(filler1, gridBagConstraints);

        emptyQ.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        emptyQ.setForeground(new java.awt.Color(220, 0, 0));
        emptyQ.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        emptyQ.setText("Make sure you have put a answer to all questions");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(emptyQ, gridBagConstraints);

        FAVButton.setBackground(new java.awt.Color(244, 242, 226));
        FAVButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lib/DisFAVButtonWINDOS10EDITION.png"))); // NOI18N
        FAVButton.setBorderPainted(false);
        FAVButton.setFocusPainted(false);
        FAVButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FAVButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(FAVButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void prevButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prevButtonMouseEntered
        // TODO add your handling code here:
        prevButton.setBackground(Color.decode("#F4F2E2"));
        prevButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5, true));
        prevButton.setBorderPainted(true);
        prevButton.setForeground(Color.BLACK);
    }//GEN-LAST:event_prevButtonMouseEntered

    private void prevButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prevButtonMouseExited
        // TODO add your handling code here:
        prevButton.setBackground(Color.decode("#4A1948"));
        prevButton.setBorderPainted(false);
        prevButton.setForeground(Color.decode("#F4F2E2"));
    }//GEN-LAST:event_prevButtonMouseExited

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        // TODO add your handling code here:
        endButton.setVisible(true);
        nextButton.setText("Next");
        Index = (Index - 1 + testQuestions.size()) % testQuestions.size();
        endQ = LocalDateTime.now();
        Time[Index + 1] += student.calculateQuestionTime(startQ, endQ);
        questionTimes.add(Time[Index + 1]);
        student.updateQuestionMetrics(currentQuestion, Time[Index + 1]);
        displayTest();
    }//GEN-LAST:event_prevButtonActionPerformed

    private void nextButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextButtonMouseEntered
        // TODO add your handling code here:
        nextButton.setBackground(Color.decode("#F4F2E2"));
        nextButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5, true));
        nextButton.setBorderPainted(true);
        nextButton.setForeground(Color.BLACK);
    }//GEN-LAST:event_nextButtonMouseEntered

    private void nextButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextButtonMouseExited
        // TODO add your handling code here:
        nextButton.setBackground(Color.decode("#4A1948"));
        nextButton.setBorderPainted(false);
        nextButton.setForeground(Color.decode("#F4F2E2"));
    }//GEN-LAST:event_nextButtonMouseExited

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        // TODO add your handling code here:
        if (nextButton.getText().equals("Finish Test")) {
            Time[Index] += student.calculateQuestionTime(startQ, endQ);
            questionTimes.add(Time[Index]);
            student.updateQuestionMetrics(currentQuestion, Time[Index]);
            test.setEndTime(LocalDateTime.now());
            totalTestTime = questionTimes.stream().mapToDouble(Double::doubleValue).sum();
            test.setDuration((int) totalTestTime);
            averageTimePerQuestion = totalTestTime / numQuestions;
            for (int i = 0; i < testQuestions.size(); i++) {
                test.addAnswer(answer[i] - 'A');
                correctAnswers.add(currentQuestion.getRightAnswer());
            }

            // Calculate score
            score = student.calculateScore(test.getTakerAnswers(), correctAnswers);
            percentageScore = (double) score / numQuestions * 100;

            // Set grade based on score
            TDB = new TestDAO();
            // Update test and student statistics
            student.updateTestStatistics(test, percentageScore, totalTestTime);
            TDB.saveTest(test);
            AccumalativePercent = 0;
            for (Test t : TDB.searchTestsByStudent(student)) {
                AccumalativePercent += t.getTestResult();
            }
            AccumalativePercent /= TDB.searchTestsByStudent(student).size();
            student.calculateGrade(AccumalativePercent);
            SDB = new StudentDAO();
            SDB.updateStudent(student);
            String[] options = {"Ok", "Take Another test"};
            int response = JOptionPane.showOptionDialog(
                    null, // Parent component (null for center of screen)
                    "Score: " + score + ", Number of questions: " + numQuestions + ", Percentage: " + percentageScore + ", Total time taken: " + totalTestTime + ", Average Time Per Question: " + averageTimePerQuestion + ", Grade: " + student.getGrade() + ", Status: " + (percentageScore >= Test.getPassingScore() ? "PASSED" : "FAILED"),
                    "Test Report", // Title
                    JOptionPane.YES_NO_OPTION, // Options
                    JOptionPane.QUESTION_MESSAGE, // Icon type
                    null,
                    options,
                    options[0]
            );
            if (response == 0) {
                StudentDashboardMenuP studentDashboard = new StudentDashboardMenuP(student, cardLayout, container);
                container.add(studentDashboard, "studentDashboard");
                cardLayout.show(container, "studentDashboard");
            } else {
                setUpTest setTest = new setUpTest(student, cardLayout, container);
                container.add(setTest, "setTest");
                cardLayout.show(container, "setTest");
            }
        } else {
            Index = (Index + 1) % testQuestions.size();
            endQ = LocalDateTime.now();
            Time[Index - 1] += student.calculateQuestionTime(startQ, endQ);
            questionTimes.add(Time[Index - 1]);
            student.updateQuestionMetrics(currentQuestion, Time[Index - 1]);
            displayTest();
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void endButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_endButtonMouseEntered
        // TODO add your handling code here:
        endButton.setBackground(Color.decode("#F4F2E2"));
        endButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5, true));
        endButton.setBorderPainted(true);
        endButton.setForeground(Color.BLACK);
    }//GEN-LAST:event_endButtonMouseEntered

    private void endButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_endButtonMouseExited
        // TODO add your handling code here:
        endButton.setBackground(Color.decode("#4A1948"));
        endButton.setBorderPainted(false);
        endButton.setForeground(Color.decode("#F4F2E2"));
    }//GEN-LAST:event_endButtonMouseExited

    private void endButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endButtonActionPerformed
        // TODO add your handling code here:
        int response = JOptionPane.showConfirmDialog(
                null, // Parent component (null for center of screen)
                "Are you sure you want to withdraw from the test?", // Message
                "Backtomenu", // Title
                JOptionPane.YES_NO_OPTION, // Options
                JOptionPane.QUESTION_MESSAGE // Icon type
        );
        if (response == JOptionPane.YES_OPTION) {
            availableQuestions = null;
            testQuestions = null;
            test = null;
            correctAnswers = null;
            questionTimes = null;
            currentQuestion = null;
            StudentDashboardMenuP studentDashboard = new StudentDashboardMenuP(student, cardLayout, container);
            container.add(studentDashboard, "studentDashboard");
            cardLayout.show(container, "studentDashboard");
        }
    }//GEN-LAST:event_endButtonActionPerformed

    private void AchoosenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AchoosenActionPerformed
        // TODO add your handling code here:
        answer[Index] = 'A';
    }//GEN-LAST:event_AchoosenActionPerformed

    private void BchoosenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BchoosenActionPerformed
        // TODO add your handling code here:
        answer[Index] = 'B';
    }//GEN-LAST:event_BchoosenActionPerformed

    private void CchoosenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CchoosenActionPerformed
        // TODO add your handling code here:
        answer[Index] = 'C';
    }//GEN-LAST:event_CchoosenActionPerformed

    private void DchoosenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DchoosenActionPerformed
        // TODO add your handling code here:
        answer[Index] = 'D';
    }//GEN-LAST:event_DchoosenActionPerformed

    private void FAVButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FAVButtonActionPerformed
        // TODO add your handling code here:
        // Check if the question is already a favorite
        boolean isItFavorite = false;
        QuestionBank targetBank = null;

        for (QuestionBank favQuestionBank : student.getFavoriteQuestions()) {
            if (favQuestionBank.getQuestions().contains(currentQuestion)) {
                isItFavorite = true;
                targetBank = favQuestionBank;
                break;
            }
        }

        QuestionBankDAO questionBankDAO = new QuestionBankDAO();
        CategoryDAO categoryDAO = new CategoryDAO();

        if (isItFavorite && targetBank != null) {
            // Unmark as favorite
            //System.out.println("Question removed from favorites: " + question);

            // Update the question's favorite count
            currentQuestion.setNumberOfFavorites(currentQuestion.getNumberOfFavorites() - 1);

            // Update the database
            List<QuestionBank> qb = questionBankDAO.searchByCreator(student.getUserId());

            if (!qb.isEmpty()) {
                ArrayList<Question> currentQs = qb.get(0).getQuestions();
                currentQs.removeIf(q -> q.getQuestionID().equals(currentQuestion.getQuestionID()));
                qb.get(0).setQuestions(currentQs);
                questionBankDAO.updateQuestionBank(qb.get(0));
            }

            // Update the local favoriteQuestions list
            ArrayList<Question> targetQuestions = targetBank.getQuestions();
            targetQuestions.removeIf(q -> q.getQuestionID().equals(currentQuestion.getQuestionID()));
            targetBank.setQuestions(targetQuestions);

            // Update student in database
            StudentDAO studentDAO = new StudentDAO();
            studentDAO.updateStudent(student);

            URL iconURL = getClass().getResource("/lib/DisFAVButtonWINDOS10EDITION.png");
            if (iconURL != null) {
                FAVButton.setIcon(new javax.swing.ImageIcon(iconURL));
            } else {
                // Handle the error, e.g., log it or show a default icon
                System.err.println("Resource not found: /lib/DisFAVButtonWINDOS10EDITION.png");
            }

        } else {
            // Mark as favorite
            Category category = categoryDAO.loadCategory(currentQuestion.getTopic());

            // Try to find matching bank in favoriteQuestions list
            QuestionBank favoriteBank = null;
            for (QuestionBank bank : student.getFavoriteQuestions()) {
                if (bank.getCategoryID().equals(category.getCategoryId())
                        && bank.getCreatorID().equals(student.getUserId())) {
                    favoriteBank = bank;
                    break;
                }
            }

            // If not found in memory, check database
            if (favoriteBank == null) {
                List<QuestionBank> existingBanks = questionBankDAO.searchByCategoryAndCreator(category, student.getUserId());
                for (QuestionBank bank : existingBanks) {
                    if (bank.getCreatorID().equals(student.getUserId())) {
                        favoriteBank = bank;
                        // Add to favoriteQuestions if found in database but not in memory
                        if (!student.getFavoriteQuestions().contains(favoriteBank)) {
                            student.getFavoriteQuestions().add(favoriteBank);
                        }
                        break;
                    }
                }
            }

            // If still null, create new bank
            if (favoriteBank == null) {
                favoriteBank = new QuestionBank(
                        student.getUserId(),
                        category.getCategoryId(),
                        LocalDate.now()
                );
                favoriteBank.setQuestions(new ArrayList<>());
                student.getFavoriteQuestions().add(favoriteBank);
            }

            // Add the question to the favorite bank if it's not already there
            ArrayList<Question> questions = favoriteBank.getQuestions();
            if (!questions.contains(currentQuestion)) {
                questions.add(currentQuestion);
                favoriteBank.setQuestions(questions);

                // Update the question's favorite count
                currentQuestion.setNumberOfFavorites(currentQuestion.getNumberOfFavorites() + 1);

                // Update the database
                //student.updateQuestionInDatabase(currentQuestion, questionBankDAO, categoryDAO);
                questionBankDAO.saveQuestionBank(favoriteBank);

                // Update student in database
                StudentDAO studentDAO = new StudentDAO();
                studentDAO.updateStudent(student);

                URL iconURL = getClass().getResource("/lib/FAVButtonWINDOS10EDITION.png");
                if (iconURL != null) {
                    FAVButton.setIcon(new javax.swing.ImageIcon(iconURL));
                } else {
                    // Handle the error, e.g., log it or show a default icon
                    System.err.println("Resource not found: /lib/FAVButtonWINDOS10EDITION.png");
                }
            }
        }

    }//GEN-LAST:event_FAVButtonActionPerformed
    private void buildtest() {
        Collections.shuffle(availableQuestions);
        testQuestions = availableQuestions.subList(0, numQuestions);
        // Create Test
        test = new Test(
                choosencategory,
                LocalDate.now(),
                student.getUserId(),
                difficulty,
                new ArrayList<>(testQuestions)
        );
        test.setStartTime(LocalDateTime.now());
        // Take the test with time tracking
        test.reset();
        correctAnswers = new ArrayList<>();
        questionTimes = new ArrayList<>();
        displayTest();
    }

    private void displayTest() {
        startQ = LocalDateTime.now();
        currentQuestion = testQuestions.get(Index);
        questionHolder.setText(currentQuestion.getStatement());
        String[] choices = currentQuestion.getChoices();
        Achoosen.setText(choices[0]);
        Bchoosen.setText(choices[1]);
        Cchoosen.setText(choices[2]);
        Dchoosen.setText(choices[3]);
        if (Index == (numQuestions - 1)) {
            nextButton.setText("Finish Test");
            endButton.setVisible(false);
        } else {
            nextButton.setText("Next");
            endButton.setVisible(true);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Achoosen;
    private javax.swing.JRadioButton Bchoosen;
    private javax.swing.JRadioButton Cchoosen;
    private javax.swing.JRadioButton Dchoosen;
    private javax.swing.JButton FAVButton;
    private javax.swing.JLabel Timer;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel emptyQ;
    private javax.swing.JButton endButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton prevButton;
    private javax.swing.JLabel questionHolder;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
