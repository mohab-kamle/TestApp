/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.StudentPanels;

import DataBaseManagment.CategoryDAO;
import DataBaseManagment.QuestionBankDAO;
import EndUser.Student;
import TestSystem.Category;
import TestSystem.Question;
import TestSystem.Question.dlevel;
import java.awt.CardLayout;
import java.awt.Color;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Zeyad
 */
public class setUpTest extends javax.swing.JPanel {

    private Student student;
    private CardLayout cardLayout;
    private JPanel container;
    CategoryDAO categoryDAO;
    QuestionBankDAO questionBankDAO;
    List<Category> categories;
    Category choosencategory;
    String choosen;
    String difficulty;
    List<Question> availableQuestions = new ArrayList<>();
    int num = 5;
    testPanel testP;

    /**
     * Creates new form setUpTest
     */
    public setUpTest(Student student, CardLayout cardLayout, JPanel container) {
        initComponents();
        errorHolder.setVisible(false);
        this.student = student;
        this.cardLayout = cardLayout;
        this.container = container;
        questionBankDAO = new QuestionBankDAO();
        categoryDAO = new CategoryDAO();
        categories = categoryDAO.getCategoriesList();
        for (int i = 0; i < categories.size(); i++) {
            boolean flag = false;
            for (int j = 0; j < catagoryDropList.getItemCount(); j++) {
                if (catagoryDropList.getItemAt(j).equals(categories.get(i).getName())) {
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                catagoryDropList.addItem(categories.get(i).getName());
            } else {
                flag = false;
            }
        }
        choosen = (String) catagoryDropList.getSelectedItem();
        difficulty = (String) difficultyDropList.getSelectedItem();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        setUpTitle = new javax.swing.JLabel();
        ComfirmButton = new javax.swing.JButton();
        difficultyDropList = new javax.swing.JComboBox<>();
        catagoryDropList = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        Minus = new javax.swing.JButton();
        Plus = new javax.swing.JButton();
        QuestionsNum = new javax.swing.JTextField();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 120), new java.awt.Dimension(0, 120), new java.awt.Dimension(32767, 120));
        Backbutton = new javax.swing.JButton();
        errorHolder = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 250, 206));
        setPreferredSize(new java.awt.Dimension(800, 500));
        setLayout(new java.awt.GridBagLayout());

        setUpTitle.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        setUpTitle.setForeground(new java.awt.Color(0, 0, 0));
        setUpTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        setUpTitle.setText("Setup Test Page");
        setUpTitle.setPreferredSize(new java.awt.Dimension(270, 45));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(setUpTitle, gridBagConstraints);

        ComfirmButton.setBackground(new java.awt.Color(74, 25, 72));
        ComfirmButton.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        ComfirmButton.setForeground(new java.awt.Color(255, 250, 206));
        ComfirmButton.setText("Start test");
        ComfirmButton.setBorderPainted(false);
        ComfirmButton.setFocusPainted(false);
        ComfirmButton.setPreferredSize(new java.awt.Dimension(235, 35));
        ComfirmButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ComfirmButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ComfirmButtonMouseExited(evt);
            }
        });
        ComfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComfirmButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(ComfirmButton, gridBagConstraints);

        difficultyDropList.setBackground(new java.awt.Color(255, 250, 206));
        difficultyDropList.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        difficultyDropList.setForeground(new java.awt.Color(0, 0, 0));
        difficultyDropList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Set Difficulty", "EASY", "MEDIUM", "HARD" }));
        difficultyDropList.setBorder(new javax.swing.border.MatteBorder(null));
        difficultyDropList.setPreferredSize(new java.awt.Dimension(240, 40));
        difficultyDropList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                difficultyDropListActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(difficultyDropList, gridBagConstraints);

        catagoryDropList.setBackground(new java.awt.Color(255, 250, 206));
        catagoryDropList.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        catagoryDropList.setForeground(new java.awt.Color(0, 0, 0));
        catagoryDropList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select category", "Mathematics", "Science", "Java Programming Language", "COMP333" }));
        catagoryDropList.setBorder(new javax.swing.border.MatteBorder(null));
        catagoryDropList.setPreferredSize(new java.awt.Dimension(365, 40));
        catagoryDropList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                catagoryDropListActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(catagoryDropList, gridBagConstraints);

        jPanel1.setBackground(new java.awt.Color(255, 250, 206));

        Minus.setBackground(new java.awt.Color(255, 250, 206));
        Minus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lib/resizedMinus.png"))); // NOI18N
        Minus.setBorderPainted(false);
        Minus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Minus.setFocusPainted(false);
        Minus.setPreferredSize(new java.awt.Dimension(36, 36));
        Minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MinusActionPerformed(evt);
            }
        });

        Plus.setBackground(new java.awt.Color(255, 250, 206));
        Plus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lib/resizedPlus.png"))); // NOI18N
        Plus.setBorderPainted(false);
        Plus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Plus.setFocusPainted(false);
        Plus.setPreferredSize(new java.awt.Dimension(36, 36));
        Plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlusActionPerformed(evt);
            }
        });

        QuestionsNum.setEditable(false);
        QuestionsNum.setBackground(new java.awt.Color(255, 250, 206));
        QuestionsNum.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        QuestionsNum.setForeground(new java.awt.Color(0, 0, 0));
        QuestionsNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        QuestionsNum.setText("5");
        QuestionsNum.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 0, 0)));
        QuestionsNum.setPreferredSize(new java.awt.Dimension(38, 32));
        QuestionsNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuestionsNumActionPerformed(evt);
            }
        });
        QuestionsNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                QuestionsNumKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(QuestionsNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Plus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Minus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(QuestionsNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Plus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Minus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.weighty = 2.0;
        add(filler1, gridBagConstraints);

        Backbutton.setBackground(new java.awt.Color(74, 25, 72));
        Backbutton.setFont(new java.awt.Font("Consolas", 0, 36)); // NOI18N
        Backbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lib/turnback-40.png"))); // NOI18N
        Backbutton.setToolTipText("Click to go back");
        Backbutton.setBorderPainted(false);
        Backbutton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Backbutton.setFocusPainted(false);
        Backbutton.setFocusable(false);
        Backbutton.setMaximumSize(new java.awt.Dimension(145, 60));
        Backbutton.setMinimumSize(new java.awt.Dimension(145, 60));
        Backbutton.setPreferredSize(new java.awt.Dimension(145, 60));
        Backbutton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                BackbuttonFocusGained(evt);
            }
        });
        Backbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackbuttonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BackbuttonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BackbuttonMouseExited(evt);
            }
        });
        Backbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackbuttonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Backbutton, gridBagConstraints);

        errorHolder.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N
        errorHolder.setForeground(new java.awt.Color(220, 0, 0));
        errorHolder.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorHolder.setText("ErrorHolder");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(errorHolder, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void QuestionsNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuestionsNumActionPerformed
        // TODO add your handling code here:
        if (Integer.parseInt(QuestionsNum.getText().trim()) <= 5) {
            QuestionsNum.setText("5");
        } else if (Integer.parseInt(QuestionsNum.getText().trim()) > availableQuestions.size()) {
            QuestionsNum.setText(Integer.toString(availableQuestions.size()));
        }
    }//GEN-LAST:event_QuestionsNumActionPerformed

    private void PlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlusActionPerformed
        // TODO add your handling code here:
        if (!((choosen.isEmpty() || choosen.equals("Select category")) || (difficulty.isEmpty() || difficulty.equals("Set Difficulty")))) {
            if (availableQuestions.size() < Integer.parseInt(QuestionsNum.getText().trim()) && availableQuestions.size() > 5) {
                num = availableQuestions.size();
                errorHolder.setVisible(false);
            } else if (availableQuestions.size() < 5) {
                errorHolder.setText("This category with this difficulty does not have enough questions");
                errorHolder.setVisible(true);
                num = availableQuestions.size();
            } else if (num > 40) {
                num = 40;
                errorHolder.setVisible(false);
            } else {
                num++;
                errorHolder.setVisible(false);
                QuestionsNum.setText(Integer.toString(num));
            }
//        if (availableQuestions.size() < 5 || availableQuestions.size() < num) {
//            errorHolder.setText("This category with this difficulty does not have enough questions");
//            errorHolder.setVisible(true);
//        } else {
//            errorHolder.setVisible(false);
//        }
            //QuestionsNum.setText(Integer.toString(num));
        }
    }//GEN-LAST:event_PlusActionPerformed

    private void BackbuttonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BackbuttonFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_BackbuttonFocusGained

    private void BackbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackbuttonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_BackbuttonMouseClicked

    private void BackbuttonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackbuttonMouseEntered
        // TODO add your handling code here:
        URL iconURL = getClass().getResource("/lib/turn-back.png");
        if (iconURL != null) {
            Backbutton.setIcon(new javax.swing.ImageIcon(iconURL));
        } else {
            // Handle the error, e.g., log it or show a default icon
            System.err.println("Resource not found: /lib/turn-back.png");
        }
        Backbutton.setBackground(Color.decode("#F4F2E2"));
        Backbutton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5, true));
        Backbutton.setBorderPainted(true);
    }//GEN-LAST:event_BackbuttonMouseEntered

    private void BackbuttonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackbuttonMouseExited
        // TODO add your handling code here:
        URL iconURL = getClass().getResource("/lib/turnback-40.png");
        if (iconURL != null) {
            Backbutton.setIcon(new javax.swing.ImageIcon(iconURL));
        } else {
            // Handle the error, e.g., log it or show a default icon
            System.err.println("Resource not found: /lib/turnback-40.png");
        }
        Backbutton.setBackground(Color.decode("#4A1948"));
        Backbutton.setBorderPainted(false);
        Backbutton.setForeground(Color.decode("#F4F2E2"));
    }//GEN-LAST:event_BackbuttonMouseExited

    private void BackbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackbuttonActionPerformed
        // TODO add your handling code here:
        int response = JOptionPane.showConfirmDialog(
                null, // Parent component (null for center of screen)
                "Are you sure you want to withdraw from the test?", // Message
                "Backtomenu", // Title
                JOptionPane.YES_NO_OPTION, // Options
                JOptionPane.QUESTION_MESSAGE // Icon type
        );
        if (response == JOptionPane.YES_OPTION) {
            StudentDashboardMenuP studentDashboard = new StudentDashboardMenuP(student, cardLayout, container);
            container.add(studentDashboard, "studentDashboard");
            cardLayout.show(container, "studentDashboard");
        }
    }//GEN-LAST:event_BackbuttonActionPerformed

    private void ComfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComfirmButtonActionPerformed
        // TODO add your handling code here:
        if ((choosen.isEmpty() || choosen.equals("Select category")) && (difficulty.isEmpty() || difficulty.equals("Set Difficulty"))) {
            errorHolder.setText("Please revise all the inputs");
            errorHolder.setVisible(true);
        } else if (choosen.isEmpty() || choosen.equals("Select category")) {
            errorHolder.setText("Please choose a catagory");
            errorHolder.setVisible(true);
        } else if (difficulty.isEmpty() || difficulty.equals("Set Difficulty")) {
            errorHolder.setText("Please set a difficulty");
            errorHolder.setVisible(true);
        } else if (errorHolder.isVisible()) {
        } else {
            errorHolder.setVisible(false);
            String[] options = {"Start", "No"};
            int response = JOptionPane.showOptionDialog(
                    null, // Parent component (null for center of screen)
                    "Category: " + choosen + ", Difficulty: " + difficulty + ", Number of Questions: " + num, // Message
                    "Enter Test", // Title
                    JOptionPane.YES_NO_OPTION, // Options
                    JOptionPane.QUESTION_MESSAGE, // Icon type
                    null,
                    options,
                    options[0]
            );
            if (response == 0) {
                testP = new testPanel(student, availableQuestions, choosencategory, dlevel.valueOf(difficulty), num, cardLayout, container);
                container.add(testP, "testP");
                cardLayout.show(container, "testP");
            }
        }

    }//GEN-LAST:event_ComfirmButtonActionPerformed

    private void ComfirmButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ComfirmButtonMouseEntered
        // TODO add your handling code here:
        ComfirmButton.setBackground(Color.decode("#F4F2E2"));
        ComfirmButton.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5, true));
        ComfirmButton.setBorderPainted(true);
        ComfirmButton.setForeground(Color.BLACK);
    }//GEN-LAST:event_ComfirmButtonMouseEntered

    private void ComfirmButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ComfirmButtonMouseExited
        // TODO add your handling code here:
        ComfirmButton.setBackground(Color.decode("#4A1948"));
        ComfirmButton.setBorderPainted(false);
        ComfirmButton.setForeground(Color.decode("#F4F2E2"));
    }//GEN-LAST:event_ComfirmButtonMouseExited

    private void catagoryDropListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_catagoryDropListActionPerformed
        // TODO add your handling code here:
        errorHolder.setVisible(false);

        errorHolder.setVisible(false);
        choosen = (String) catagoryDropList.getSelectedItem();
        if (!(difficulty.isEmpty() || difficulty.equals("Set Difficulty"))) {
            for (int i = 0; i < categories.size(); i++) {
                if (categories.get(i).getName().equalsIgnoreCase((String) catagoryDropList.getSelectedItem())) {
                    choosencategory = categories.get(i);
                }
            }
            if (choosencategory != null )
                availableQuestions = student.findQuestionsForTest(questionBankDAO, choosencategory, dlevel.valueOf(difficulty));
            if (availableQuestions.size() < 5) {
                errorHolder.setText("This category with this difficulty does not have enough questions");
                errorHolder.setVisible(true);
            } else {
                errorHolder.setVisible(false);
            }
        }
    }//GEN-LAST:event_catagoryDropListActionPerformed

    private void difficultyDropListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_difficultyDropListActionPerformed
        // TODO add your handling code here:
        errorHolder.setVisible(false);

        errorHolder.setVisible(false);
        difficulty = (String) difficultyDropList.getSelectedItem();
        if (!((choosen.isEmpty() || choosen.equalsIgnoreCase("Select category")) || (difficulty.isEmpty() || difficulty.equals("Set Difficulty")))) {
            if (choosencategory != null )
                availableQuestions = student.findQuestionsForTest(questionBankDAO, choosencategory, dlevel.valueOf(difficulty));
            if (availableQuestions.size() < 5) {
                errorHolder.setText("This category with this difficulty does not have enough questions");
                errorHolder.setVisible(true);
            } else {
                errorHolder.setVisible(false);
            }
        }
    }//GEN-LAST:event_difficultyDropListActionPerformed

    private void MinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MinusActionPerformed
        // TODO add your handling code here:
        if (!((choosen.isEmpty() || choosen.equals("Select category")) || (difficulty.isEmpty() || difficulty.equals("Set Difficulty")))) {
            if (num <= 5) {
                num = 5;
            } else {
                num--;
            }
            QuestionsNum.setText(Integer.toString(num));
        }
    }//GEN-LAST:event_MinusActionPerformed

    private void QuestionsNumKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_QuestionsNumKeyReleased
        // TODO add your handling code here:
        /*if (Integer.parseInt(QuestionsNum.getText().trim()) <= 5) {
            QuestionsNum.setText("5");
        } else if (Integer.parseInt(QuestionsNum.getText().trim()) > availableQuestions.size()) {
            QuestionsNum.setText(Integer.toString(availableQuestions.size()));
        }*/
    }//GEN-LAST:event_QuestionsNumKeyReleased
    /*private void QuestionsForTest() {
        // Collect questions from all question banks for the given category and difficulty
        List<QuestionBank> categoryBanks = questionBankDAO.searchByCategory(choosencategory);
        AdminDAO ADB = new AdminDAO();
        for (QuestionBank bank : categoryBanks) {
            if (ADB.IsThisIdForAdmin(bank.getCreatorID())) {
                availableQuestions.addAll(bank.getQuestionsByDifficulty(dlevel.valueOf(difficulty)));
            }
        }
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Backbutton;
    private javax.swing.JButton ComfirmButton;
    private javax.swing.JButton Minus;
    private javax.swing.JButton Plus;
    private javax.swing.JTextField QuestionsNum;
    private javax.swing.JComboBox<String> catagoryDropList;
    private javax.swing.JComboBox<String> difficultyDropList;
    private javax.swing.JLabel errorHolder;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel setUpTitle;
    // End of variables declaration//GEN-END:variables
}
